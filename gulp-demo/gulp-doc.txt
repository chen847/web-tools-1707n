Web tools
Day 01

gulp、webpack、mocha、yeoman 都是 Node.js 的第三方模块，都是与 web 项目有关的工具模块

一、gulp
1. gulp 的作用
	1.1 检查 js 的语法错误
	1.2 合并和压缩 js 文件
	1.3 编译 css 预处理器文件
	1.4 其它的作用：安装对应的插件，定义任务 task
		
2. gulp 的使用，官网：https://gulpjs.com/； 中文：https://www.gulpjs.com.cn/
3. 安装 gulp 为全局模块，任意目录 cmd：cnpm i -g gulp
4. 创建项目的配置文件：package.json，gulp-demo/ cmd: npm init
5. 安装 gulp 为项目的开发依赖，gulp-demo/ cmd: cnpm i --save-dev gulp
6. 创建 gulp 配置文件：gulp-demo/gulpfile.js
7. 引入 gulp: const gulp = require('gulp');
8. 定义一个 gulp 任务：
	gulp.task('default', () => {console.log('hi');}
9. 在 WebStorm 里打开命令行，快捷键是： Alt + F12，进入当前目录，执行命令：gulp + 回车
10. 安装 jshint 为项目的开发依赖，gulp-demo/ cmd:
cnpm i --save-dev jshint gulp-jshint
11. 引用 gulp-jshint：const jshint = require('gulp-jshint');
12. 定义任务一个 gulp 任务：
	12.1 gulp.task('hint', () => {});
	12.2 gulp-jshint 插件的作用是检查 js 文件的语法错误 
13. 在 default 任务中，声明执行这个 hint 任务：gulp.run('hint');
14. 安装 gulp-concat gulp-uglify gulp-rename 为项目的开发依赖，gulp-demo/ cmd: cnpm i --save-dev gulp-concat gulp-uglify gulp-rename
15. scripts 任务：
    gulp.src('./js/*.js') // 指定要处理的源文件
        .pipe(concat('all.js')) // 合并所有的 js 为 all.js
        .pipe(gulp.dest('./dist')) // 把 all.js 放到 /dist 目录中。dest：destination 目标、目的地；dist：distribution 发行、发布
        .pipe(rename('all.min.js')) // 把 all.js 改名为 all.min.js
        .pipe(uglify()) // 压缩 all.min.js
        .pipe(gulp.dest('./dist')); // 把 all.min.js 放到 /dist 目录中
16. 单独执行一个任务，cmd：gulp <任务名>
17. 安装 gulp-sass 项目的开发依赖，gulp-demo/ cmd: cnpm i --save-dev gulp-sass
18. 定义任务：sass
	gulp.src('./sass/*.sass') // 指定要处理的源文件
	    .pipe(sass()) // 编译 sass 文件为 css 文件
	    .pipe(gulp.dest('./css')); // 生成的 css 文件放入 css 目录中
19. gulp 的函数：
	19.1 gulp.task();
	19.2 gulp.run();
	19.3 gulp.src();
	19.4 gulp.dest();
	19.5 gulp.watch();

二、webpack，web 项目的打包工具
20. 创建目录：webpack-demo
21. 安装全局第三方模块 webpack，任意目录下，cmd：cnpm i -g webpack
22. 项目目录下创建 package.json 文件，cmd: npm init
23. 安装项目开发依赖 webpack，当前目录下，cmd：cnpm i -D webpack
24. 创建目录，当前目录下：public
25. 创建文件：public/index.html
26. 创建目录，当前目录下：app
26. 创建文件：app/hello.js
27. 创建文件：app/main.js
28. 当前目录执行，cmd：webpack app/main.js public/bundle.js
29. 浏览器打开 public/index.html：Hello，Webpack！
30. 当前目录下，创建文件：webpack.config.js
	30.1 指定 entry：入口文件
	30.2 指定 output：出口文件
31. 在 package.json 中，为 “scripts”，添加一个名称-值对："start": "webpack"
32. 再运行 webpack 命令时，可以使用 cmd：npm [run] start
33. 如果 scripts 中的名称为 start 时，运行命令的时候可以省略 run
